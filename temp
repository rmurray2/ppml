# -*- coding: utf-8 -*-
"""
Created on Fri Mar 13 18:35:29 2015
@author: rm
"""

starting_grades = [
#columns correspond to time stamps (month-year)
[ ], [ ], [grade1, grade2], [ ],  #student 1’s grades
[ ], [grade3, grade4], [ ] , [ ], #student 2’s grades
…
]

starting_credits = [
#columns correspond to time stamps (month-year)
[ ], [ ], [1, 2], [ ],  #student 1’s credits
[ ], [5, 6], [ ] , [ ], #student 2’s credits
…
]


credit_grade_dict = {} #generate {credit : grade_list } vector

student_count = 0 #keep track of student iteration

for student in starting_credits:
timestamp_count  = 0 #keep track of timestamp iteration, reset at each student
for timestamp in student:

        temp_sum = sum(timestamp) #sum the credit’s during a given period
        temp_grades = starting_grades[student_count] [timestamp_count] #retrieve grades for same student in same timestamp from starting_grades vector
        if temp_sum in credit_grade_dict: # if temp_sum already present, add the grades
            credit_grade_dict[ temp_sum ].append( temp_grades ) 
else: # if temp_sum not already present, created it, and add grades data
credit_grade_dict[ temp_sum ] = [ temp_grades ]     

timestamp_count += 1
student_count += 1
    

count_dict = {} #dictionary that contains the counts of sum credit/grade combinations
for credit in range(0, 25):
    for possible_grade in range(0, 5):
        grade_count = 0
        if credit in credit_grade_dict: #if the sum exists in the dict
            for grade in credit_grade_dict[credit]:
                if grade == possible_grade:
                    grade_count += 1
        count_dict [ (credit, grade) ] = grade_count

